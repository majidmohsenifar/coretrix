// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	product "coretrix/internal/product"

	mock "github.com/stretchr/testify/mock"

	response "coretrix/internal/response"
)

// ProductService is an autogenerated mock type for the Service type
type ProductService struct {
	mock.Mock
}

// All provides a mock function with given fields:
func (_m *ProductService) All() ([]product.Product, error) {
	ret := _m.Called()

	var r0 []product.Product
	if rf, ok := ret.Get(0).(func() []product.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ID
func (_m *ProductService) FindByID(ID int) (product.Product, error) {
	ret := _m.Called(ID)

	var r0 product.Product
	if rf, ok := ret.Get(0).(func(int) product.Product); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(product.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: params
func (_m *ProductService) Search(params product.SearchParams) (response.ApiResponse, int) {
	ret := _m.Called(params)

	var r0 response.ApiResponse
	if rf, ok := ret.Get(0).(func(product.SearchParams) response.ApiResponse); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Get(0).(response.ApiResponse)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(product.SearchParams) int); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}
