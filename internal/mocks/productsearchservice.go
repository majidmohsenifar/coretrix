// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	product "coretrix/internal/product"

	mock "github.com/stretchr/testify/mock"
)

// ProductSearchService is an autogenerated mock type for the SearchService type
type ProductSearchService struct {
	mock.Mock
}

// IndexProducts provides a mock function with given fields: _a0
func (_m *ProductSearchService) IndexProducts(_a0 []product.Product) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]product.Product) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchProductByTitle provides a mock function with given fields: title, page, pageSize
func (_m *ProductSearchService) SearchProductByTitle(title string, page int, pageSize int) ([]product.ProductSearchResult, int, error) {
	ret := _m.Called(title, page, pageSize)

	var r0 []product.ProductSearchResult
	if rf, ok := ret.Get(0).(func(string, int, int) []product.ProductSearchResult); ok {
		r0 = rf(title, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.ProductSearchResult)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, int, int) int); ok {
		r1 = rf(title, page, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, int, int) error); ok {
		r2 = rf(title, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
